<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fort ColdHumour</title>
  <subtitle>我们一路奋战，不是为了改变世界，而是为了不让这个世界改变我们</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coldhumour.github.io/"/>
  <updated>2017-03-20T14:30:00.546Z</updated>
  <id>http://coldhumour.github.io/</id>
  
  <author>
    <name>Jasper Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Eudaemonic Pie</title>
    <link href="http://coldhumour.github.io/2017/03/20/The-Eudaemonic-Pie/"/>
    <id>http://coldhumour.github.io/2017/03/20/The-Eudaemonic-Pie/</id>
    <published>2017-03-20T14:28:20.000Z</published>
    <updated>2017-03-20T14:30:00.546Z</updated>
    
    <content type="html"><![CDATA[<p>这是一本书，从读的时候开始，直到读完了之后回想细品，我一直都在尝试着给其定一个具体的分类。说它是小说吧，里面的人和事都是真实的；说它是传记吧，对话和描写又显然沾染了很多文学演绎的气息。思虑再三，好像也就是“传奇”可以略略贴近一些。可能把真实发生的事情称作legend略远，然而称作lengedary却是丝毫不为过。这本书少有地于我触动极大，无论是从“励志”的角度，还是从人生经验的角度，用“受益匪浅”来形容都有些不甚恰当了，留下来的更多的是让人仔细品味反复琢磨的东西。</p>
<a id="more"></a>
<p>在知道这本书之前，业已听说过这个beat roulette的故事，虽然可以清晰地记得一些科普读物中提到过，但是似乎模模糊糊地记得最早听人说起是在本科时期，忘了哪门课或者哪个老师话题发散提过一句。各种真真假假的信息碎片拼起来，只是知道曾经有这么一群人做了一件很酷的事情。其时的大概印象，一如《在路上》、《禅与摩托车维修艺术》亦或是各种公路片，时间和景色呼啸着逝去，闪过杂乱的三极管、硅谷的林荫道、内华达的沙漠公路和拉斯维加斯的霓虹灯，成功的喜悦如焰火绽放，而后大家各自散去。</p>
<p>后来读到本书，里面详细地提到了这本书和里面的这些人，Wiki了一下又惊讶地发现和Santa Fe有着千丝万缕的联系，于是就试着去找了找这本书的资源。没有想到的是这书如此冷门，遍寻网络只找到一鳞半爪的信息。亚马逊上原版纸质书倒是有卖，当时还是学生，觉得150+的价格实在太高，于是只能按下满心好奇，留个心眼时不时找一找。没想到的是，这么一拖三四年就过去了，才终于找到了一个机会得以一睹这书的庐山真面目。</p>
<p>我读过的科学史和科学家传记也有几本了，这类书的一大问题就是文笔。有些作者过于想要塑造科学家的伟大，渲染各种类似《读者》或者语文课本里的类似于鸡汤的故事，在作者的想象中科学家就应该具有典型科学家的各种特质；有些作者视角不错，但是对相关领域一窍不通，一说到科学家的具体工作或成就上就只能语焉不详，让人只知道科学家花费了很多心血推公式做实验，但并不理解为什么这些东西是困难的；有些作者是专业出身，能把相关研究和理论的精妙之处描绘出来，而人的存在感就比较稀薄，但是理论往往并不是顺着逻辑顺序研究出来的，如何从未知当中梳理出逻辑贯穿始终的理论体系才是科学家们的价值和魅力所在。</p>
<p>废话了这么多，其实只是想说，这书文笔方面的扬长避短做得非常好。作者是学文学的，于数学和计算机方面了解并不深，然而好就好在他亲身经历了一部分的故事，和那些科学家混久了，对他们在干什么以及为什么能有个概念。通过细致的观察和描写，作者能够把电路元件、制作工艺和开发过程生动地呈现出来，如果读者对科学理论部分有一定了解的话，不难把相应的部分脑补出来。而且在这个过程中，结合自身的经验，对于做这样的一件事情遇到的困难也更是能够设身处地地去感受和体会。</p>
<p>这种文笔也是阅读的一大障碍。我在拿到书之后满怀欣喜地信手翻了两页，发现这本书是个硬骨头。厚是最直观的一个方面，文笔又是另一个方面。作者不愧是学文学出身，用词和句法真是文艺，比方说可以用drink的地方会放一个imbibe，再比方说一堆十几个字母的形容词中文查出来都是五六个字的复合形容词。本来以为我的词汇量读个这种类型的书应该还凑合，结果就实际情况看又学了一堆生词，真是意想不到的收获。也正是拜此所赐，我整整看了有3个多月，一般通勤单程地铁上20分钟能看掉1%-2%，我就已经很开心了。</p>
<p>说到描写，作者对于景物和环境的描写功力相当不错，地下室、逛鞋店、买零件、拉斯维加斯巡游、两次Holloween party，读过必定印象深刻。在这种生动的笔触下，人物塑造也就不成问题了。作者在这方面另一个巨大的优势是，他认识这些人，他跟这些人很熟，所以对话更多是日常交流而非台本，这些人自然而然地就活了起来。每个人都是那么的个性鲜明，能够参与到Eudaemonic Pie核心的人都不是一般人，他们各擅胜场，也正是这种技能的互补，才能够得以把一个看上去几近天方夜谭的想法实现出来。书中提到过，这一想法并没有那么稀罕，诸如Claude Shannon, Edward Thorp等大神早就产生过类似的想法，但是限于时代和人力，他们在实现过程当中撞到了不可逾越的障碍，从而只能将之束之高阁。而Farmer, Norman他们则有了一试的机会，并终于有所斩获。从偏工程师的角度看，这种理论指导实践的实例是科学最大的魅力之一吧。</p>
<p>内容方面没什么好剧透的，就是一群人有了一个想法，然后努力地去付诸实践，取得了一定的成果，但是止步于更大的困难。在这个故事里，过程比结果更为重要。主角们更是从小时候写起，让读者可以了解他们是怎么一步一步学习、成长、相遇，是怎么产生idea、修正idea、设计方案、实践、debug、升级……我个人在做PE的时候经常会遇到类似的局面，比如面对一片空白挑选着手点的时候，想方设法评估思路是否可行的时候，遇到困难斟酌到底是正面进攻或者需要换角度绕过去的时候，以及解决了但是代码不那么漂亮尽力去优化的时候。现在养成了一个习惯，每次完成整理代码的时候都会不自觉地想一想，有没有什么点是可以等到review的时候可以进一步深挖的，这个思路有没有什么更抽象的层级可以应用到其他地方。我做一道小题目的复杂度和格局当然比他们要小得多，不过他们解决问题的方法、态度、考虑的约束都有可借鉴之处，共鸣也好自作多情也好，看到大神们也会为同样的事情所困惑挣扎，是一件比较令人宽慰的事情。</p>
<p>总体说来，除了为这一传奇故事的精彩所吸引，以及从故事中人们的行为当中学习之外，这本书对我最大的意义是给予信心。一些比较复杂的个人项目不定时都有筹划，但性格问题导致目前最大的障碍还是可行性分析，即常常困在我到底有没有能力去完成这些东西，因为时间和精力投入的机会成本实在是太高了，而且基本上不会得到他人的支持。The Eudaemonians给了我一个极佳的范例，即使要做的事情没有先例，即使并不知道会遇到什么困难，即使最后花了三年时间仍然失败了，但是在自己的时间里做一些自己的事情绝对是值得的。</p>
<p>读完这本书，我又再次上网找了找相关的人和事情，发现Thomas Bass还写了一本书，主角还是这一群人，然而故事却改变了，不过那书更加难找就是。幸好Cecilia帮忙，应该可以在美国买到，接下来等她什么时候休假回国就行了。反正The Eudaemonic Pie都等了这么久，也不急于这一时。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一本书，从读的时候开始，直到读完了之后回想细品，我一直都在尝试着给其定一个具体的分类。说它是小说吧，里面的人和事都是真实的；说它是传记吧，对话和描写又显然沾染了很多文学演绎的气息。思虑再三，好像也就是“传奇”可以略略贴近一些。可能把真实发生的事情称作legend略远，然而称作lengedary却是丝毫不为过。这本书少有地于我触动极大，无论是从“励志”的角度，还是从人生经验的角度，用“受益匪浅”来形容都有些不甚恰当了，留下来的更多的是让人仔细品味反复琢磨的东西。&lt;/p&gt;
    
    </summary>
    
      <category term="Reading Life" scheme="http://coldhumour.github.io/categories/Reading-Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Guide</title>
    <link href="http://coldhumour.github.io/2017/03/14/Prophet%20Guide/"/>
    <id>http://coldhumour.github.io/2017/03/14/Prophet Guide/</id>
    <published>2017-03-14T13:52:00.000Z</published>
    <updated>2017-03-14T13:55:09.378Z</updated>
    
    <content type="html"><![CDATA[<p>这两天看到Facebook的Prophet很火，于是也想上手玩玩，试了下才发现这东西并不好装。幸好有之前配置Cython的经验，省去了很多烦恼。</p>
<ol>
<li><p>参见Cython安装教程，配置好Cython和Visual C++ Build Tools 2015</p>
</li>
<li><p>pip install pystan</p>
</li>
<li><p>从<a href="https://github.com/facebookincubator/prophet" target="_blank" rel="external">github/facebookincubator</a>下载prophet-master，解压，进入~/prophet-master/python，python setup.py install</p>
</li>
<li><p>使用方法见<a href="https://facebookincubator.github.io/prophet/" target="_blank" rel="external">官方文档</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天看到Facebook的Prophet很火，于是也想上手玩玩，试了下才发现这东西并不好装。幸好有之前配置Cython的经验，省去了很多烦恼。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;参见Cython安装教程，配置好Cython和Visual C++ Build Tools 20
    
    </summary>
    
      <category term="Knowledges" scheme="http://coldhumour.github.io/categories/Knowledges/"/>
    
    
  </entry>
  
  <entry>
    <title>Literature Links</title>
    <link href="http://coldhumour.github.io/2017/02/18/Literature%20Links/"/>
    <id>http://coldhumour.github.io/2017/02/18/Literature Links/</id>
    <published>2017-02-18T07:38:41.000Z</published>
    <updated>2017-02-18T11:28:43.694Z</updated>
    
    <content type="html"><![CDATA[<p>一些未曾来及看的或反复看的文章</p>
<a id="more"></a>
<ul>
<li><p><a href="http://www.wildml.com/2015/09/implementing-a-neural-network-from-scratch/" target="_blank" rel="external">Implementing a Neural Network from Scratch in Python</a></p>
</li>
<li><p><a href="http://www.math.harvard.edu/library/sternberg/" target="_blank" rel="external">Dynamic System, Harvard</a></p>
</li>
<li><p><a href="https://gist.github.com/jdkanani/4670615" target="_blank" rel="external">Change Browser to Code Editer</a></p>
</li>
<li><p><a href="http://www.mit.edu/~evanchen/coursework.html" target="_blank" rel="external">Mathematics Course Notes</a></p>
</li>
<li><p><a href="http://www.bearcave.com/misl/misl_tech/wavelets/hurst/" target="_blank" rel="external">Estimate Hurst Exponent</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些未曾来及看的或反复看的文章&lt;/p&gt;
    
    </summary>
    
      <category term="Knowledges" scheme="http://coldhumour.github.io/categories/Knowledges/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Guide</title>
    <link href="http://coldhumour.github.io/2017/01/01/Hexo%20Guide/"/>
    <id>http://coldhumour.github.io/2017/01/01/Hexo Guide/</id>
    <published>2017-01-01T04:00:00.000Z</published>
    <updated>2017-03-14T13:48:20.785Z</updated>
    
    <content type="html"><![CDATA[<p>其实也没什么特别的Guide，搜索hexo分分钟一大把网页，这里只是为了记一下一些常用的命令和链接，以免临时想写博客结果忘了怎么部署的尴尬。</p>
<pre><code>hexo new &quot;post title&quot;

hexo server  # 本地调试

hexo clean

hexo g

hexo d
</code></pre><a id="more"></a>
<p>以前一直在用不老歌，作为个人博客当然没的说，但是作为技术博客还是差了一些功能。之前从@taotao.li大神那里学习了搭github.io，但是那个博客需要对前端倾注太多心血，一直也没空钻研。偶然有一天上S1发现有人提到Hexo，说是简单好用，于是就此存了个心。后来终于找到个比较闲的周末，外面狂风骤雨不得安宁，索兴找了几个教程一步一步走下来，于是也就有了这里。</p>
<p>不得不说Hexo还是相当人性化的，像我这种对前端几乎一窍不通的人也能很轻松的搭起来，简单个性化一下的需求也可以很快地利用现成的主题修改完成，简直懒人福音。</p>
<ul>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo.io</a></li>
<li><a href="https://github.com/wuchong/jacman" target="_blank" rel="external">Theme: Jacman</a></li>
<li>页面配置看_config.yml，根目录或者主题目录下都有</li>
<li>hexo server可以实时查看效果</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实也没什么特别的Guide，搜索hexo分分钟一大把网页，这里只是为了记一下一些常用的命令和链接，以免临时想写博客结果忘了怎么部署的尴尬。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo new &amp;quot;post title&amp;quot;

hexo server  # 本地调试

hexo clean

hexo g

hexo d
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Knowledges" scheme="http://coldhumour.github.io/categories/Knowledges/"/>
    
    
  </entry>
  
</feed>
